{
  "AWSTemplateFormatVersion": "2010-09-09", 
  "Conditions": {
    "RegionIsUsEast1": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        }, 
        "us-east-1"
      ]
    }
  }, 
  "Description": "Launching the Mesosphere DCOS cluster", 
  "Mappings": {
    "NATAmi": {
      "ap-northeast-1": {
        "default": "ami-55c29e54"
      }, 
      "ap-southeast-1": {
        "default": "ami-b082dae2"
      }, 
      "ap-southeast-2": {
        "default": "ami-996402a3"
      }, 
      "eu-central-1": {
        "default": "ami-204c7a3d"
      }, 
      "eu-west-1": {
        "default": "ami-3760b040"
      }, 
      "sa-east-1": {
        "default": "ami-b972dba4"
      }, 
      "us-east-1": {
        "default": "ami-4c9e4b24"
      }, 
      "us-west-1": {
        "default": "ami-2b2b296e"
      }, 
      "us-west-2": {
        "default": "ami-bb69128b"
      }
    }, 
    "Parameters": {
      "MasterInstanceType": {
        "default": "m3.xlarge"
      }, 
      "PrivateSubnetRange": {
        "default": "10.0.0.0/22"
      }, 
      "PublicSlaveInstanceType": {
        "default": "m3.xlarge"
      }, 
      "PublicSubnetRange": {
        "default": "10.0.4.0/22"
      }, 
      "SlaveInstanceType": {
        "default": "m3.xlarge"
      }, 
      "StackCreationTimeout": {
        "default": "PT30M"
      }, 
      "VPCSubnetRange": {
        "default": "10.0.0.0/16"
      }
    }, 
    "RegionToAmi": {
      "ap-northeast-1": {
        "stable": "ami-22d27b22"
      }, 
      "ap-southeast-1": {
        "stable": "ami-0ef1f15c"
      }, 
      "ap-southeast-2": {
        "stable": "ami-2b2e6911"
      }, 
      "eu-central-1": {
        "stable": "ami-02211b1f"
      }, 
      "eu-west-1": {
        "stable": "ami-50f4b927"
      }, 
      "sa-east-1": {
        "stable": "ami-45a62a58"
      }, 
      "us-east-1": {
        "stable": "ami-6b1cd400"
      }, 
      "us-gov-west-1": {
        "stable": "ami-e53a59c6"
      }, 
      "us-west-1": {
        "stable": "ami-bf8477fb"
      }, 
      "us-west-2": {
        "stable": "ami-f5a5a5c5"
      }
    }
  }, 
  "Metadata": {
    "DcosImageCommit": "d217d730fd25748f577174dbfdfb383450632733", 
    "TemplateGenerationDate": "2015-09-03 00:29:07.101340"
  }, 
  "Outputs": {
    "DnsAddress": {
      "Description": "Mesos Master", 
      "Value": {
        "Fn::GetAtt": [
          "ElasticLoadBalancer", 
          "DNSName"
        ]
      }
    }, 
    "PublicSlaveDnsAddress": {
      "Description": "Public slaves", 
      "Value": {
        "Fn::GetAtt": [
          "PublicSlaveLoadBalancer", 
          "DNSName"
        ]
      }
    }
  }, 
  "Parameters": {
    "AcceptEULA": {
      "AllowedValues": [
        "Yes"
      ], 
      "Description": "Please read and agree to our EULA: https://docs.mesosphere.com/community-edition-eula/", 
      "Type": "String"
    }, 
    "AdminLocation": {
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$", 
      "ConstraintDescription": "must be a valid CIDR.", 
      "Default": "0.0.0.0/0", 
      "Description": "The IP range to whitelist for admin access.", 
      "MaxLength": "18", 
      "MinLength": "9", 
      "Type": "String"
    }, 
    "KeyName": {
      "Description": "Name of SSH key to link", 
      "Type": "AWS::EC2::KeyPair::KeyName"
    }, 
    "PublicSlaveInstanceCount": {
      "Default": "1", 
      "Description": "Number of public slave nodes to launch", 
      "Type": "Number"
    }, 
    "SlaveInstanceCount": {
      "Default": "1", 
      "Description": "Number of slave nodes to launch", 
      "Type": "Number"
    }
  }, 
  "Resources": {
    "AdminSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enable admin access to servers", 
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Ref": "AdminLocation"
            }, 
            "FromPort": "0", 
            "IpProtocol": "-1", 
            "ToPort": "65535"
          }
        ], 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "DHCPOptions": {
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "RegionIsUsEast1", 
            "ec2.internal", 
            {
              "Fn::Join": [
                "", 
                [
                  {
                    "Ref": "AWS::Region"
                  }, 
                  ".compute.internal"
                ]
              ]
            }
          ]
        }, 
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }, 
      "Type": "AWS::EC2::DHCPOptions"
    }, 
    "ElasticLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "2", 
          "Interval": "30", 
          "Target": "HTTP:5050/health", 
          "Timeout": "5", 
          "UnhealthyThreshold": "2"
        }, 
        "Listeners": [
          {
            "InstancePort": "80", 
            "InstanceProtocol": "HTTP", 
            "LoadBalancerPort": "80", 
            "Protocol": "HTTP"
          }, 
          {
            "InstancePort": "443", 
            "InstanceProtocol": "TCP", 
            "LoadBalancerPort": "443", 
            "Protocol": "TCP"
          }
        ], 
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          }, 
          {
            "Ref": "AdminSecurityGroup"
          }
        ], 
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }, 
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    }, 
    "ExhibitorS3Bucket": {
      "DeletionPolicy": "Retain", 
      "Type": "AWS::S3::Bucket"
    }, 
    "GatewayToInternet": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }, 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::VPCGatewayAttachment"
    }, 
    "HostKeys": {
      "Properties": {
        "UserName": {
          "Ref": "IAMUser"
        }
      }, 
      "Type": "AWS::IAM::AccessKey"
    }, 
    "IAMUser": {
      "Properties": {
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:AbortMultipartUpload", 
                    "s3:DeleteObject", 
                    "s3:GetBucketAcl", 
                    "s3:GetBucketPolicy", 
                    "s3:GetObject", 
                    "s3:GetObjectAcl", 
                    "s3:ListBucket", 
                    "s3:ListBucketMultipartUploads", 
                    "s3:ListMultipartUploadParts", 
                    "s3:PutObject", 
                    "s3:PutObjectAcl"
                  ], 
                  "Effect": "Allow", 
                  "Resource": [
                    {
                      "Fn::Join": [
                        "", 
                        [
                          "arn:aws:s3:::", 
                          {
                            "Ref": "ExhibitorS3Bucket"
                          }, 
                          "/*"
                        ]
                      ]
                    }, 
                    {
                      "Fn::Join": [
                        "", 
                        [
                          "arn:aws:s3:::", 
                          {
                            "Ref": "ExhibitorS3Bucket"
                          }
                        ]
                      ]
                    }
                  ]
                }, 
                {
                  "Action": [
                    "cloudformation:*"
                  ], 
                  "Effect": "Allow", 
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    }, 
                    {
                      "Fn::Join": [
                        "", 
                        [
                          {
                            "Ref": "AWS::StackId"
                          }, 
                          "/*"
                        ]
                      ]
                    }
                  ]
                }, 
                {
                  "Action": [
                    "ec2:DescribeKeyPairs", 
                    "ec2:DescribeSubnets", 
                    "autoscaling:DescribeLaunchConfigurations", 
                    "autoscaling:UpdateAutoScalingGroup", 
                    "autoscaling:DescribeAutoScalingGroups", 
                    "autoscaling:DescribeScalingActivities", 
                    "elasticloadbalancing:DescribeLoadBalancers"
                  ], 
                  "Effect": "Allow", 
                  "Resource": "*"
                }
              ], 
              "Version": "2012-10-17"
            }, 
            "PolicyName": "root"
          }
        ]
      }, 
      "Type": "AWS::IAM::User"
    }, 
    "InboundNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "false", 
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }, 
        "PortRange": {
          "From": "0", 
          "To": "65535"
        }, 
        "Protocol": "-1", 
        "RuleAction": "allow", 
        "RuleNumber": "100"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "InternalMasterLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "2", 
          "Interval": "30", 
          "Target": "HTTP:5050/health", 
          "Timeout": "5", 
          "UnhealthyThreshold": "2"
        }, 
        "Listeners": [
          {
            "InstancePort": "5050", 
            "InstanceProtocol": "HTTP", 
            "LoadBalancerPort": "5050", 
            "Protocol": "HTTP"
          }, 
          {
            "InstancePort": "2181", 
            "InstanceProtocol": "TCP", 
            "LoadBalancerPort": "2181", 
            "Protocol": "TCP"
          }, 
          {
            "InstancePort": "8181", 
            "InstanceProtocol": "HTTP", 
            "LoadBalancerPort": "8181", 
            "Protocol": "HTTP"
          }, 
          {
            "InstancePort": "80", 
            "InstanceProtocol": "HTTP", 
            "LoadBalancerPort": "80", 
            "Protocol": "HTTP"
          }, 
          {
            "InstancePort": "443", 
            "InstanceProtocol": "TCP", 
            "LoadBalancerPort": "443", 
            "Protocol": "TCP"
          }, 
          {
            "InstancePort": "8080", 
            "InstanceProtocol": "HTTP", 
            "LoadBalancerPort": "8080", 
            "Protocol": "HTTP"
          }
        ], 
        "Scheme": "internal", 
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          }, 
          {
            "Ref": "AdminSecurityGroup"
          }, 
          {
            "Ref": "SlaveSecurityGroup"
          }, 
          {
            "Ref": "PublicSlaveSecurityGroup"
          }, 
          {
            "Ref": "MasterSecurityGroup"
          }
        ], 
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }, 
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    }, 
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ]
      }, 
      "Type": "AWS::EC2::InternetGateway"
    }, 
    "LbSecurityGroup": {
      "Properties": {
        "GroupDescription": "Mesos Master LB", 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "MasterInstanceProfile": {
      "Properties": {
        "Path": "/", 
        "Roles": [
          {
            "Ref": "MasterRole"
          }
        ]
      }, 
      "Type": "AWS::IAM::InstanceProfile"
    }, 
    "MasterLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": "true", 
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb", 
            "VirtualName": "ephemeral0"
          }
        ], 
        "IamInstanceProfile": {
          "Ref": "MasterInstanceProfile"
        }, 
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi", 
            {
              "Ref": "AWS::Region"
            }, 
            "stable"
          ]
        }, 
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters", 
            "MasterInstanceType", 
            "default"
          ]
        }, 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "SecurityGroups": [
          {
            "Ref": "MasterSecurityGroup"
          }, 
          {
            "Ref": "AdminSecurityGroup"
          }
        ], 
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", 
              [
                "#cloud-config\n", 
                "\"coreos\":\n", 
                "  \"units\":\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Write out dynamic config values\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      # TODO(cmaloney): Remove these and get rid of the bits that require them.\n", 
                "      ExecStart=/usr/bin/bash -c \"echo EXHIBITOR_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", 
                "      ExecStart=/usr/bin/bash -c \"echo MARATHON_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", 
                "    \"name\": |-\n", 
                "      config-writer.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"mask\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      etcd.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"mask\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      update-engine.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"mask\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      locksmithd.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"name\": |-\n", 
                "      systemd-resolved.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |\n", 
                "      [Unit]\n", 
                "      Description=Formats the /var/lib ephemeral drive\n", 
                "      Before=var-lib.mount dbus.service\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      RemainAfterExit=yes\n", 
                "      ExecStart=/bin/bash -c '(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)'\n", 
                "    \"name\": |-\n", 
                "      format-var-lib-ephemeral.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Mount /var/lib\n", 
                "      Before=dbus.service\n", 
                "      [Mount]\n", 
                "      What=/dev/xvdb\n", 
                "      Where=/var/lib\n", 
                "      Type=ext4\n", 
                "    \"name\": |-\n", 
                "      var-lib.mount\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |\n", 
                "      [Unit]\n", 
                "      Before=dcos.target\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n", 
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n", 
                "    \"name\": |-\n", 
                "      link-env.service\n", 
                "  - \"content\": |\n", 
                "      [Unit]\n", 
                "      Description=Download the DCOS\n", 
                "      After=network-online.target\n", 
                "      Wants=network-online.target\n", 
                "      ConditionPathExists=!/opt/mesosphere/\n", 
                "      [Service]\n", 
                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n", 
                "      Type=oneshot\n", 
                "      ExecStartPre=/usr/bin/bash -c \"until wget --progress=dot -e dotbytes=10M --continue https://downloads.mesosphere.com/dcos/stable/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz -O /tmp/bootstrap.tar.xz; do echo 'failed to download'; sleep 5; done\"\n", 
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n", 
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n", 
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n", 
                "    \"name\": |-\n", 
                "      dcos-download.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Prep the Pkgpanda working directories for this host.\n", 
                "      Requires=dcos-download.service\n", 
                "      After=dcos-download.service\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      EnvironmentFile=/opt/mesosphere/environment\n", 
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n", 
                "      [Install]\n", 
                "      WantedBy=multi-user.target\n", 
                "    \"enable\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      dcos-setup.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Signal CloudFormation Success\n", 
                "      After=dcos.target\n", 
                "      Requires=dcos.target\n", 
                "      ConditionPathExists=!/var/lib/cfn-signal\n", 
                "      [Service]\n", 
                "      Type=simple\n", 
                "      Restart=on-failure\n", 
                "      StartLimitInterval=0\n", 
                "      RestartSec=15s\n", 
                "      ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap\n", 
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n", 
                "      ExecStartPre=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \\\n", 
                "        cfn-signal -e 0 \\\n", 
                "        --resource MasterServerGroup \\\n", 
                "        --stack ", 
                {
                  "Ref": "AWS::StackName"
                }, 
                " \\", 
                "\n", 
                "        --region ", 
                {
                  "Ref": "AWS::Region"
                }, 
                "", 
                "\n", 
                "      ExecStart=/usr/bin/touch /var/lib/cfn-signal\n", 
                "    \"name\": |-\n", 
                "      cfn-signal.service\n", 
                "  \"update\":\n", 
                "    \"reboot-strategy\": |-\n", 
                "      off\n", 
                "\"write_files\":\n", 
                "- \"content\": |\n", 
                "    https://downloads.mesosphere.com/dcos/stable\n", 
                "  \"owner\": |-\n", 
                "    root\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-flags/repository-url\n", 
                "  \"permissions\": !!int |-\n", 
                "    420\n", 
                "- \"content\": |\n", 
                "    BOOTSTRAP_ID=c62741d7f47beaba6b67d6072ef994e1064452bb\n", 
                "  \"owner\": |-\n", 
                "    root\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-flags/bootstrap-id\n", 
                "  \"permissions\": !!int |-\n", 
                "    420\n", 
                "- \"content\": |-\n", 
                "    [\"dcos-config--setup_df4c50da4ac3c6193da72d278056cdfa02330c4d\"]\n", 
                "  \"owner\": |-\n", 
                "    root\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n", 
                "  \"permissions\": !!int |-\n", 
                "    420\n", 
                "- \"content\": |\n", 
                "    {\n", 
                "      \"environment\": {\n", 
                "        \"PROVIDER\": \"aws\"\n", 
                "      }\n", 
                "    }\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n", 
                "- \"content\": |\n", 
                "    AWS_REGION=", 
                {
                  "Ref": "AWS::Region"
                }, 
                "", 
                "\n", 
                "    AWS_STACK_ID=", 
                {
                  "Ref": "AWS::StackId"
                }, 
                "", 
                "\n", 
                "    AWS_STACK_NAME=", 
                {
                  "Ref": "AWS::StackName"
                }, 
                "", 
                "\n", 
                "    AWS_ACCESS_KEY_ID=", 
                {
                  "Ref": "HostKeys"
                }, 
                "", 
                "\n", 
                "    AWS_SECRET_ACCESS_KEY=", 
                {
                  "Fn::GetAtt": [
                    "HostKeys", 
                    "SecretAccessKey"
                  ]
                }, 
                "", 
                "\n", 
                "    ZOOKEEPER_CLUSTER_SIZE=1\n", 
                "    MASTER_ELB=", 
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer", 
                    "DNSName"
                  ]
                }, 
                "", 
                "\n", 
                "    EXTERNAL_ELB=", 
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer", 
                    "DNSName"
                  ]
                }, 
                "", 
                "\n", 
                "    # Must set FALLBACK_DNS to an AWS region-specific DNS server which returns\n", 
                "    # the internal IP when doing lookups on AWS public hostnames.\n", 
                "    FALLBACK_DNS=10.0.0.2\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\n", 
                "- \"content\": |\n", 
                "    MESOS_CLUSTER=", 
                {
                  "Ref": "AWS::StackName"
                }, 
                "", 
                "\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n", 
                "- \"content\": |\n", 
                "    AWS_S3_BUCKET=", 
                {
                  "Ref": "ExhibitorS3Bucket"
                }, 
                "", 
                "\n", 
                "    AWS_S3_PREFIX=", 
                {
                  "Ref": "AWS::StackName"
                }, 
                "", 
                "\n", 
                "    EXHIBITOR_WEB_UI_PORT=8181\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n", 
                "- \"content\": \"\"\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/roles/master\n", 
                "- \"content\": \"\"\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/roles/aws_master\n", 
                "- \"content\": \"\"\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        }
      }, 
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    }, 
    "MasterRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ], 
          "Version": "2012-10-17"
        }, 
        "Path": "/", 
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:AbortMultipartUpload", 
                    "s3:DeleteObject", 
                    "s3:GetBucketAcl", 
                    "s3:GetBucketPolicy", 
                    "s3:GetObject", 
                    "s3:GetObjectAcl", 
                    "s3:ListBucket", 
                    "s3:ListBucketMultipartUploads", 
                    "s3:ListMultipartUploadParts", 
                    "s3:PutObject", 
                    "s3:PutObjectAcl"
                  ], 
                  "Effect": "Allow", 
                  "Resource": [
                    {
                      "Fn::Join": [
                        "", 
                        [
                          "arn:aws:s3:::", 
                          {
                            "Ref": "ExhibitorS3Bucket"
                          }, 
                          "/*"
                        ]
                      ]
                    }, 
                    {
                      "Fn::Join": [
                        "", 
                        [
                          "arn:aws:s3:::", 
                          {
                            "Ref": "ExhibitorS3Bucket"
                          }
                        ]
                      ]
                    }
                  ]
                }, 
                {
                  "Action": [
                    "cloudformation:*"
                  ], 
                  "Effect": "Allow", 
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    }, 
                    {
                      "Fn::Join": [
                        "", 
                        [
                          {
                            "Ref": "AWS::StackId"
                          }, 
                          "/*"
                        ]
                      ]
                    }
                  ]
                }, 
                {
                  "Action": [
                    "ec2:DescribeKeyPairs", 
                    "ec2:DescribeSubnets", 
                    "autoscaling:DescribeLaunchConfigurations", 
                    "autoscaling:UpdateAutoScalingGroup", 
                    "autoscaling:DescribeAutoScalingGroups", 
                    "autoscaling:DescribeScalingActivities", 
                    "elasticloadbalancing:DescribeLoadBalancers"
                  ], 
                  "Effect": "Allow", 
                  "Resource": "*"
                }
              ], 
              "Version": "2012-10-17"
            }, 
            "PolicyName": "root"
          }
        ]
      }, 
      "Type": "AWS::IAM::Role"
    }, 
    "MasterSecurityGroup": {
      "Properties": {
        "GroupDescription": "Mesos Masters", 
        "SecurityGroupIngress": [
          {
            "FromPort": "5050", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            }, 
            "ToPort": "5050"
          }, 
          {
            "FromPort": "80", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            }, 
            "ToPort": "80"
          }, 
          {
            "FromPort": "8080", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            }, 
            "ToPort": "8080"
          }, 
          {
            "FromPort": "8181", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            }, 
            "ToPort": "8181"
          }, 
          {
            "FromPort": "2181", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            }, 
            "ToPort": "2181"
          }
        ], 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "MasterServerGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 1, 
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters", 
              "StackCreationTimeout", 
              "default"
            ]
          }
        }
      }, 
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet", 
              "AvailabilityZone"
            ]
          }
        ], 
        "DesiredCapacity": 1, 
        "LaunchConfigurationName": {
          "Ref": "MasterLaunchConfig"
        }, 
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }, 
          {
            "Ref": "InternalMasterLoadBalancer"
          }
        ], 
        "MaxSize": 1, 
        "MinSize": 1, 
        "Tags": [
          {
            "Key": "role", 
            "PropagateAtLaunch": "true", 
            "Value": "mesos-master"
          }
        ], 
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }, 
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    }, 
    "MasterToMasterIngress": {
      "Properties": {
        "FromPort": "0", 
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }, 
        "IpProtocol": "-1", 
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        }, 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "MasterToPublicSlaveIngress": {
      "Properties": {
        "FromPort": "0", 
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "IpProtocol": "-1", 
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        }, 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "MasterToSlaveIngress": {
      "Properties": {
        "FromPort": "0", 
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        }, 
        "IpProtocol": "-1", 
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        }, 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "NATInstance": {
      "DependsOn": "GatewayToInternet", 
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "NATAmi", 
            {
              "Ref": "AWS::Region"
            }, 
            "default"
          ]
        }, 
        "InstanceType": "m3.medium", 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true", 
            "DeleteOnTermination": "true", 
            "DeviceIndex": "0", 
            "GroupSet": [
              {
                "Ref": "SlaveSecurityGroup"
              }, 
              {
                "Ref": "MasterSecurityGroup"
              }, 
              {
                "Ref": "AdminSecurityGroup"
              }
            ], 
            "SubnetId": {
              "Ref": "PublicSubnet"
            }
          }
        ], 
        "SourceDestCheck": "false"
      }, 
      "Type": "AWS::EC2::Instance"
    }, 
    "OutboundNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "true", 
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }, 
        "PortRange": {
          "From": "0", 
          "To": "65535"
        }, 
        "Protocol": "-1", 
        "RuleAction": "allow", 
        "RuleNumber": "100"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "PrivateInboundNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "false", 
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }, 
        "PortRange": {
          "From": "0", 
          "To": "65535"
        }, 
        "Protocol": "-1", 
        "RuleAction": "allow", 
        "RuleNumber": "100"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "PrivateNetworkAcl": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ], 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::NetworkAcl"
    }, 
    "PrivateOutboundNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "true", 
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }, 
        "PortRange": {
          "From": "0", 
          "To": "65535"
        }, 
        "Protocol": "-1", 
        "RuleAction": "allow", 
        "RuleNumber": "100"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "PrivateRoute": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0", 
        "InstanceId": {
          "Ref": "NATInstance"
        }, 
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }, 
      "Type": "AWS::EC2::Route"
    }, 
    "PrivateRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ], 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::RouteTable"
    }, 
    "PrivateSubnet": {
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters", 
            "PrivateSubnetRange", 
            "default"
          ]
        }, 
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Private"
          }
        ], 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::Subnet"
    }, 
    "PrivateSubnetNetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }, 
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      }, 
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    }, 
    "PrivateSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }, 
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      }, 
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }, 
    "PublicNetworkAcl": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ], 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::NetworkAcl"
    }, 
    "PublicRoute": {
      "DependsOn": "GatewayToInternet", 
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0", 
        "GatewayId": {
          "Ref": "InternetGateway"
        }, 
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }, 
      "Type": "AWS::EC2::Route"
    }, 
    "PublicRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ], 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::RouteTable"
    }, 
    "PublicSlaveIngressFive": {
      "Properties": {
        "CidrIp": "0.0.0.0/0", 
        "FromPort": "23", 
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "IpProtocol": "udp", 
        "ToPort": "5050"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "PublicSlaveIngressFour": {
      "Properties": {
        "CidrIp": "0.0.0.0/0", 
        "FromPort": "0", 
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "IpProtocol": "udp", 
        "ToPort": "21"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "PublicSlaveIngressOne": {
      "Properties": {
        "CidrIp": "0.0.0.0/0", 
        "FromPort": "0", 
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "IpProtocol": "tcp", 
        "ToPort": "21"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "PublicSlaveIngressSix": {
      "Properties": {
        "CidrIp": "0.0.0.0/0", 
        "FromPort": "5052", 
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "IpProtocol": "udp", 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "PublicSlaveIngressThree": {
      "Properties": {
        "CidrIp": "0.0.0.0/0", 
        "FromPort": "5052", 
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "IpProtocol": "tcp", 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "PublicSlaveIngressTwo": {
      "Properties": {
        "CidrIp": "0.0.0.0/0", 
        "FromPort": "23", 
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "IpProtocol": "tcp", 
        "ToPort": "5050"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "PublicSlaveLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": "true", 
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb", 
            "VirtualName": "ephemeral0"
          }
        ], 
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi", 
            {
              "Ref": "AWS::Region"
            }, 
            "stable"
          ]
        }, 
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters", 
            "PublicSlaveInstanceType", 
            "default"
          ]
        }, 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ], 
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", 
              [
                "#cloud-config\n", 
                "\"coreos\":\n", 
                "  \"units\":\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Write out dynamic config values\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      # TODO(cmaloney): Remove these and get rid of the bits that require them.\n", 
                "      ExecStart=/usr/bin/bash -c \"echo EXHIBITOR_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", 
                "      ExecStart=/usr/bin/bash -c \"echo MARATHON_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", 
                "    \"name\": |-\n", 
                "      config-writer.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"mask\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      etcd.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"mask\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      update-engine.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"mask\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      locksmithd.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"name\": |-\n", 
                "      systemd-resolved.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |\n", 
                "      [Unit]\n", 
                "      Description=Formats the /var/lib ephemeral drive\n", 
                "      Before=var-lib.mount dbus.service\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      RemainAfterExit=yes\n", 
                "      ExecStart=/bin/bash -c '(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)'\n", 
                "    \"name\": |-\n", 
                "      format-var-lib-ephemeral.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Mount /var/lib\n", 
                "      Before=dbus.service\n", 
                "      [Mount]\n", 
                "      What=/dev/xvdb\n", 
                "      Where=/var/lib\n", 
                "      Type=ext4\n", 
                "    \"name\": |-\n", 
                "      var-lib.mount\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |\n", 
                "      [Unit]\n", 
                "      Before=dcos.target\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n", 
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n", 
                "    \"name\": |-\n", 
                "      link-env.service\n", 
                "  - \"content\": |\n", 
                "      [Unit]\n", 
                "      Description=Download the DCOS\n", 
                "      After=network-online.target\n", 
                "      Wants=network-online.target\n", 
                "      ConditionPathExists=!/opt/mesosphere/\n", 
                "      [Service]\n", 
                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n", 
                "      Type=oneshot\n", 
                "      ExecStartPre=/usr/bin/bash -c \"until wget --progress=dot -e dotbytes=10M --continue https://downloads.mesosphere.com/dcos/stable/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz -O /tmp/bootstrap.tar.xz; do echo 'failed to download'; sleep 5; done\"\n", 
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n", 
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n", 
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n", 
                "    \"name\": |-\n", 
                "      dcos-download.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Prep the Pkgpanda working directories for this host.\n", 
                "      Requires=dcos-download.service\n", 
                "      After=dcos-download.service\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      EnvironmentFile=/opt/mesosphere/environment\n", 
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n", 
                "      [Install]\n", 
                "      WantedBy=multi-user.target\n", 
                "    \"enable\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      dcos-setup.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Signal CloudFormation Success\n", 
                "      After=dcos.target\n", 
                "      Requires=dcos.target\n", 
                "      ConditionPathExists=!/var/lib/cfn-signal\n", 
                "      [Service]\n", 
                "      Type=simple\n", 
                "      Restart=on-failure\n", 
                "      StartLimitInterval=0\n", 
                "      RestartSec=15s\n", 
                "      ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap\n", 
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n", 
                "      ExecStartPre=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \\\n", 
                "        cfn-signal -e 0 \\\n", 
                "        --resource PublicSlaveServerGroup \\\n", 
                "        --stack ", 
                {
                  "Ref": "AWS::StackName"
                }, 
                " \\", 
                "\n", 
                "        --region ", 
                {
                  "Ref": "AWS::Region"
                }, 
                "", 
                "\n", 
                "      ExecStart=/usr/bin/touch /var/lib/cfn-signal\n", 
                "    \"name\": |-\n", 
                "      cfn-signal.service\n", 
                "  \"update\":\n", 
                "    \"reboot-strategy\": |-\n", 
                "      off\n", 
                "\"write_files\":\n", 
                "- \"content\": |\n", 
                "    https://downloads.mesosphere.com/dcos/stable\n", 
                "  \"owner\": |-\n", 
                "    root\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-flags/repository-url\n", 
                "  \"permissions\": !!int |-\n", 
                "    420\n", 
                "- \"content\": |\n", 
                "    BOOTSTRAP_ID=c62741d7f47beaba6b67d6072ef994e1064452bb\n", 
                "  \"owner\": |-\n", 
                "    root\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-flags/bootstrap-id\n", 
                "  \"permissions\": !!int |-\n", 
                "    420\n", 
                "- \"content\": |-\n", 
                "    [\"dcos-config--setup_df4c50da4ac3c6193da72d278056cdfa02330c4d\"]\n", 
                "  \"owner\": |-\n", 
                "    root\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n", 
                "  \"permissions\": !!int |-\n", 
                "    420\n", 
                "- \"content\": |\n", 
                "    {\n", 
                "      \"environment\": {\n", 
                "        \"PROVIDER\": \"aws\"\n", 
                "      }\n", 
                "    }\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n", 
                "- \"content\": |\n", 
                "    AWS_REGION=", 
                {
                  "Ref": "AWS::Region"
                }, 
                "", 
                "\n", 
                "    AWS_STACK_ID=", 
                {
                  "Ref": "AWS::StackId"
                }, 
                "", 
                "\n", 
                "    AWS_STACK_NAME=", 
                {
                  "Ref": "AWS::StackName"
                }, 
                "", 
                "\n", 
                "    AWS_ACCESS_KEY_ID=", 
                {
                  "Ref": "HostKeys"
                }, 
                "", 
                "\n", 
                "    AWS_SECRET_ACCESS_KEY=", 
                {
                  "Fn::GetAtt": [
                    "HostKeys", 
                    "SecretAccessKey"
                  ]
                }, 
                "", 
                "\n", 
                "    ZOOKEEPER_CLUSTER_SIZE=1\n", 
                "    MASTER_ELB=", 
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer", 
                    "DNSName"
                  ]
                }, 
                "", 
                "\n", 
                "    EXTERNAL_ELB=", 
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer", 
                    "DNSName"
                  ]
                }, 
                "", 
                "\n", 
                "    # Must set FALLBACK_DNS to an AWS region-specific DNS server which returns\n", 
                "    # the internal IP when doing lookups on AWS public hostnames.\n", 
                "    FALLBACK_DNS=10.0.0.2\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\n", 
                "- \"content\": |\n", 
                "    MESOS_CLUSTER=", 
                {
                  "Ref": "AWS::StackName"
                }, 
                "", 
                "\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n", 
                "- \"content\": |\n", 
                "    AWS_S3_BUCKET=", 
                {
                  "Ref": "ExhibitorS3Bucket"
                }, 
                "", 
                "\n", 
                "    AWS_S3_PREFIX=", 
                {
                  "Ref": "AWS::StackName"
                }, 
                "", 
                "\n", 
                "    EXHIBITOR_WEB_UI_PORT=8181\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n", 
                "- \"content\": \"\"\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/roles/slave_public\n", 
                "- \"content\": \"\"\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        }
      }, 
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    }, 
    "PublicSlaveLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "2", 
          "Interval": "30", 
          "Target": "HTTP:80/", 
          "Timeout": "5", 
          "UnhealthyThreshold": "2"
        }, 
        "Listeners": [
          {
            "InstancePort": "80", 
            "InstanceProtocol": "HTTP", 
            "LoadBalancerPort": "80", 
            "Protocol": "HTTP"
          }, 
          {
            "InstancePort": "443", 
            "InstanceProtocol": "TCP", 
            "LoadBalancerPort": "443", 
            "Protocol": "TCP"
          }
        ], 
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ], 
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }, 
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    }, 
    "PublicSlaveSecurityGroup": {
      "Properties": {
        "GroupDescription": "Mesos Slaves Public", 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "PublicSlaveServerGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "PublicSlaveInstanceCount"
          }, 
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters", 
              "StackCreationTimeout", 
              "default"
            ]
          }
        }
      }, 
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet", 
              "AvailabilityZone"
            ]
          }
        ], 
        "DesiredCapacity": {
          "Ref": "PublicSlaveInstanceCount"
        }, 
        "LaunchConfigurationName": {
          "Ref": "PublicSlaveLaunchConfig"
        }, 
        "LoadBalancerNames": [
          {
            "Ref": "PublicSlaveLoadBalancer"
          }
        ], 
        "MaxSize": {
          "Ref": "PublicSlaveInstanceCount"
        }, 
        "MinSize": {
          "Ref": "PublicSlaveInstanceCount"
        }, 
        "Tags": [
          {
            "Key": "role", 
            "PropagateAtLaunch": "true", 
            "Value": "mesos-slave"
          }
        ], 
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }, 
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    }, 
    "PublicSlaveToMasterIngress": {
      "Properties": {
        "FromPort": "0", 
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }, 
        "IpProtocol": "-1", 
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "PublicSlaveToPublicSlaveIngress": {
      "Properties": {
        "FromPort": "0", 
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "IpProtocol": "-1", 
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "PublicSlaveToSlaveIngress": {
      "Properties": {
        "FromPort": "0", 
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        }, 
        "IpProtocol": "-1", 
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "PublicSubnet": {
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters", 
            "PublicSubnetRange", 
            "default"
          ]
        }, 
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ], 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::Subnet"
    }, 
    "PublicSubnetNetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }, 
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }, 
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    }, 
    "PublicSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }, 
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }, 
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }, 
    "SlaveLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": "false", 
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb", 
            "VirtualName": "ephemeral0"
          }
        ], 
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi", 
            {
              "Ref": "AWS::Region"
            }, 
            "stable"
          ]
        }, 
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters", 
            "SlaveInstanceType", 
            "default"
          ]
        }, 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "SecurityGroups": [
          {
            "Ref": "SlaveSecurityGroup"
          }
        ], 
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", 
              [
                "#cloud-config\n", 
                "\"coreos\":\n", 
                "  \"units\":\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Write out dynamic config values\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      # TODO(cmaloney): Remove these and get rid of the bits that require them.\n", 
                "      ExecStart=/usr/bin/bash -c \"echo EXHIBITOR_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", 
                "      ExecStart=/usr/bin/bash -c \"echo MARATHON_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/hostname) >> /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\"\n", 
                "    \"name\": |-\n", 
                "      config-writer.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"mask\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      etcd.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"mask\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      update-engine.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"mask\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      locksmithd.service\n", 
                "  - \"command\": |-\n", 
                "      stop\n", 
                "    \"name\": |-\n", 
                "      systemd-resolved.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |\n", 
                "      [Unit]\n", 
                "      Description=Formats the /var/lib ephemeral drive\n", 
                "      Before=var-lib.mount dbus.service\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      RemainAfterExit=yes\n", 
                "      ExecStart=/bin/bash -c '(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)'\n", 
                "    \"name\": |-\n", 
                "      format-var-lib-ephemeral.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Mount /var/lib\n", 
                "      Before=dbus.service\n", 
                "      [Mount]\n", 
                "      What=/dev/xvdb\n", 
                "      Where=/var/lib\n", 
                "      Type=ext4\n", 
                "    \"name\": |-\n", 
                "      var-lib.mount\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |\n", 
                "      [Unit]\n", 
                "      Before=dcos.target\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n", 
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n", 
                "    \"name\": |-\n", 
                "      link-env.service\n", 
                "  - \"content\": |\n", 
                "      [Unit]\n", 
                "      Description=Download the DCOS\n", 
                "      After=network-online.target\n", 
                "      Wants=network-online.target\n", 
                "      ConditionPathExists=!/opt/mesosphere/\n", 
                "      [Service]\n", 
                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n", 
                "      Type=oneshot\n", 
                "      ExecStartPre=/usr/bin/bash -c \"until wget --progress=dot -e dotbytes=10M --continue https://downloads.mesosphere.com/dcos/stable/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz -O /tmp/bootstrap.tar.xz; do echo 'failed to download'; sleep 5; done\"\n", 
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n", 
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n", 
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n", 
                "    \"name\": |-\n", 
                "      dcos-download.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Prep the Pkgpanda working directories for this host.\n", 
                "      Requires=dcos-download.service\n", 
                "      After=dcos-download.service\n", 
                "      [Service]\n", 
                "      Type=oneshot\n", 
                "      EnvironmentFile=/opt/mesosphere/environment\n", 
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n", 
                "      [Install]\n", 
                "      WantedBy=multi-user.target\n", 
                "    \"enable\": !!bool |-\n", 
                "      true\n", 
                "    \"name\": |-\n", 
                "      dcos-setup.service\n", 
                "  - \"command\": |-\n", 
                "      start\n", 
                "    \"content\": |-\n", 
                "      [Unit]\n", 
                "      Description=Signal CloudFormation Success\n", 
                "      After=dcos.target\n", 
                "      Requires=dcos.target\n", 
                "      ConditionPathExists=!/var/lib/cfn-signal\n", 
                "      [Service]\n", 
                "      Type=simple\n", 
                "      Restart=on-failure\n", 
                "      StartLimitInterval=0\n", 
                "      RestartSec=15s\n", 
                "      ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap\n", 
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n", 
                "      ExecStartPre=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \\\n", 
                "        cfn-signal -e 0 \\\n", 
                "        --resource SlaveServerGroup \\\n", 
                "        --stack ", 
                {
                  "Ref": "AWS::StackName"
                }, 
                " \\", 
                "\n", 
                "        --region ", 
                {
                  "Ref": "AWS::Region"
                }, 
                "", 
                "\n", 
                "      ExecStart=/usr/bin/touch /var/lib/cfn-signal\n", 
                "    \"name\": |-\n", 
                "      cfn-signal.service\n", 
                "  \"update\":\n", 
                "    \"reboot-strategy\": |-\n", 
                "      off\n", 
                "\"write_files\":\n", 
                "- \"content\": |\n", 
                "    https://downloads.mesosphere.com/dcos/stable\n", 
                "  \"owner\": |-\n", 
                "    root\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-flags/repository-url\n", 
                "  \"permissions\": !!int |-\n", 
                "    420\n", 
                "- \"content\": |\n", 
                "    BOOTSTRAP_ID=c62741d7f47beaba6b67d6072ef994e1064452bb\n", 
                "  \"owner\": |-\n", 
                "    root\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-flags/bootstrap-id\n", 
                "  \"permissions\": !!int |-\n", 
                "    420\n", 
                "- \"content\": |-\n", 
                "    [\"dcos-config--setup_df4c50da4ac3c6193da72d278056cdfa02330c4d\"]\n", 
                "  \"owner\": |-\n", 
                "    root\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n", 
                "  \"permissions\": !!int |-\n", 
                "    420\n", 
                "- \"content\": |\n", 
                "    {\n", 
                "      \"environment\": {\n", 
                "        \"PROVIDER\": \"aws\"\n", 
                "      }\n", 
                "    }\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n", 
                "- \"content\": |\n", 
                "    AWS_REGION=", 
                {
                  "Ref": "AWS::Region"
                }, 
                "", 
                "\n", 
                "    AWS_STACK_ID=", 
                {
                  "Ref": "AWS::StackId"
                }, 
                "", 
                "\n", 
                "    AWS_STACK_NAME=", 
                {
                  "Ref": "AWS::StackName"
                }, 
                "", 
                "\n", 
                "    AWS_ACCESS_KEY_ID=", 
                {
                  "Ref": "HostKeys"
                }, 
                "", 
                "\n", 
                "    AWS_SECRET_ACCESS_KEY=", 
                {
                  "Fn::GetAtt": [
                    "HostKeys", 
                    "SecretAccessKey"
                  ]
                }, 
                "", 
                "\n", 
                "    ZOOKEEPER_CLUSTER_SIZE=1\n", 
                "    MASTER_ELB=", 
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer", 
                    "DNSName"
                  ]
                }, 
                "", 
                "\n", 
                "    EXTERNAL_ELB=", 
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer", 
                    "DNSName"
                  ]
                }, 
                "", 
                "\n", 
                "    # Must set FALLBACK_DNS to an AWS region-specific DNS server which returns\n", 
                "    # the internal IP when doing lookups on AWS public hostnames.\n", 
                "    FALLBACK_DNS=10.0.0.2\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\n", 
                "- \"content\": |\n", 
                "    MESOS_CLUSTER=", 
                {
                  "Ref": "AWS::StackName"
                }, 
                "", 
                "\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n", 
                "- \"content\": |\n", 
                "    AWS_S3_BUCKET=", 
                {
                  "Ref": "ExhibitorS3Bucket"
                }, 
                "", 
                "\n", 
                "    AWS_S3_PREFIX=", 
                {
                  "Ref": "AWS::StackName"
                }, 
                "", 
                "\n", 
                "    EXHIBITOR_WEB_UI_PORT=8181\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n", 
                "- \"content\": \"\"\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/roles/slave\n", 
                "- \"content\": \"\"\n", 
                "  \"path\": |-\n", 
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        }
      }, 
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    }, 
    "SlaveSecurityGroup": {
      "Properties": {
        "GroupDescription": "Mesos Slaves", 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "SlaveServerGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "SlaveInstanceCount"
          }, 
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters", 
              "StackCreationTimeout", 
              "default"
            ]
          }
        }
      }, 
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PrivateSubnet", 
              "AvailabilityZone"
            ]
          }
        ], 
        "DesiredCapacity": {
          "Ref": "SlaveInstanceCount"
        }, 
        "LaunchConfigurationName": {
          "Ref": "SlaveLaunchConfig"
        }, 
        "MaxSize": {
          "Ref": "SlaveInstanceCount"
        }, 
        "MinSize": {
          "Ref": "SlaveInstanceCount"
        }, 
        "Tags": [
          {
            "Key": "role", 
            "PropagateAtLaunch": "true", 
            "Value": "mesos-slave"
          }
        ], 
        "VPCZoneIdentifier": [
          {
            "Ref": "PrivateSubnet"
          }
        ]
      }, 
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    }, 
    "SlaveToMasterIngress": {
      "Properties": {
        "FromPort": "0", 
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }, 
        "IpProtocol": "-1", 
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        }, 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "SlaveToMasterLBIngress": {
      "Properties": {
        "FromPort": "2181", 
        "GroupId": {
          "Ref": "LbSecurityGroup"
        }, 
        "IpProtocol": "tcp", 
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        }, 
        "ToPort": "2181"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "SlaveToPublicSlaveIngress": {
      "Properties": {
        "FromPort": "0", 
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        }, 
        "IpProtocol": "-1", 
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        }, 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "SlaveToSlaveIngress": {
      "Properties": {
        "FromPort": "0", 
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        }, 
        "IpProtocol": "-1", 
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        }, 
        "ToPort": "65535"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "VPCDHCPOptionsAssociation": {
      "Properties": {
        "DhcpOptionsId": {
          "Ref": "DHCPOptions"
        }, 
        "VpcId": {
          "Ref": "Vpc"
        }
      }, 
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation"
    }, 
    "Vpc": {
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters", 
            "VPCSubnetRange", 
            "default"
          ]
        }, 
        "EnableDnsHostnames": "true", 
        "EnableDnsSupport": "true", 
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ]
      }, 
      "Type": "AWS::EC2::VPC"
    }
  }
}
